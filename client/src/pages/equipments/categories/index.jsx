import React, { useEffect, useState, useRef } from "react";
import { Table, Button, Input, Popconfirm, message, Tag } from "antd";
import {
  PlusOutlined,
  EditOutlined,
  DeleteOutlined,
  SearchOutlined,
} from "@ant-design/icons";
import { useEquipmentCategoryStore } from "@/stores";
import EquipmentCategoryModal from "./CategoryModal";
import { ImageBaseUrl } from "@/variables/common";

/**
 * Mapping tr·∫°ng th√°i danh m·ª•c thi·∫øt b·ªã sang text hi·ªÉn th·ªã
 */
const statusLabel = {
  false: "ƒê√£ xo√°",
  true: "Ho·∫°t ƒë·ªông",
};

/**
 * Mapping tr·∫°ng th√°i danh m·ª•c thi·∫øt b·ªã sang m√†u s·∫Øc hi·ªÉn th·ªã
 */
const statusColor = {
  false: "red",
  true: "green",
};
/**
 * Component trang danh s√°ch danh m·ª•c thi·∫øt b·ªã
 * Hi·ªÉn th·ªã b·∫£ng danh m·ª•c v·ªõi c√°c ch·ª©c nƒÉng CRUD
 */
export default function EquipmentCategoryList() {
  // L·∫•y state v√† actions t·ª´ store qu·∫£n l√Ω danh m·ª•c thi·∫øt b·ªã
  const {
    categories,      // Danh s√°ch danh m·ª•c thi·∫øt b·ªã
    loading,         // Tr·∫°ng th√°i loading khi fetch d·ªØ li·ªáu
    error,           // L·ªói t·ª´ API
    fetchCategories, // Action fetch danh s√°ch danh m·ª•c
    createCategory,  // Action t·∫°o danh m·ª•c m·ªõi
    updateCategory,  // Action c·∫≠p nh·∫≠t danh m·ª•c
    deleteCategory,  // Action x√≥a danh m·ª•c
    pagination,      // Th√¥ng tin ph√¢n trang
  } = useEquipmentCategoryStore();

  // State qu·∫£n l√Ω giao di·ªán
  const [keyword, setKeyword] = useState(""); // T·ª´ kh√≥a t√¨m ki·∫øm
  const [modal, setModal] = useState({ open: false, edit: false, initial: {} }); // State modal
  const [confirmLoading, setConfirmLoading] = useState(false); // Loading khi submit form
  const [page, setPage] = useState(1); // Trang hi·ªán t·∫°i
  const isSearching = useRef(false); // C·ªù ƒë√°nh d·∫•u ƒëang search ƒë·ªÉ reset page

  // Effect fetch d·ªØ li·ªáu khi component mount ho·∫∑c page/keyword thay ƒë·ªïi
  useEffect(() => {
    fetchCategories({ page, keyword });
  }, [page, keyword, fetchCategories]);

  // Effect reset page v·ªÅ 1 khi keyword thay ƒë·ªïi (ch·ªâ khi search, kh√¥ng ph·∫£i khi pagination)
  useEffect(() => {
    if (isSearching.current) {
      setPage(1);
      isSearching.current = false;
    }
  }, [keyword]);

  // Effect hi·ªÉn th·ªã th√¥ng b√°o l·ªói khi c√≥ error t·ª´ store
  useEffect(() => {
    if (error) message.error(error);
  }, [error]);

  /**
   * X·ª≠ l√Ω submit form modal (th√™m m·ªõi ho·∫∑c c·∫≠p nh·∫≠t danh m·ª•c)
   * @param {object} values - D·ªØ li·ªáu t·ª´ form
   */
  const handleOk = async (values) => {
    setConfirmLoading(true);
    try {
      if (modal.edit) {
        // C·∫≠p nh·∫≠t danh m·ª•c hi·ªán c√≥
        await updateCategory(modal.initial._id, values);
        message.success("C·∫≠p nh·∫≠t danh m·ª•c th√†nh c√¥ng!");
      } else {
        // T·∫°o danh m·ª•c m·ªõi
        await createCategory(values);
        message.success("Th√™m danh m·ª•c th√†nh c√¥ng!");
      }
      // ƒê√≥ng modal v√† refresh danh s√°ch
      setModal({ open: false, edit: false, initial: {} });
      fetchCategories();
    } catch {}
    setConfirmLoading(false);
  };

  /**
   * X·ª≠ l√Ω x√≥a danh m·ª•c thi·∫øt b·ªã
   * @param {object} record - B·∫£n ghi danh m·ª•c c·∫ßn x√≥a
   */
  const handleDelete = async (record) => {
    try {
      await deleteCategory(record._id);
      message.success("Xo√° danh m·ª•c th√†nh c√¥ng!");
      fetchCategories(); // Refresh danh s√°ch sau khi x√≥a
    } catch {}
  };

  /**
   * C·∫•u h√¨nh c√°c c·ªôt cho b·∫£ng danh m·ª•c thi·∫øt b·ªã
   */
  const columns = [
    {
      title: "STT",
      render: (_, __, idx) => idx + 1, // Hi·ªÉn th·ªã s·ªë th·ª© t·ª±
      width: 60,
      align: "center",
    },
    {
      title: "T√™n danh m·ª•c",
      dataIndex: "name",
      key: "name",
    },
    {
      title: "M√¥ t·∫£",
      dataIndex: "description",
      key: "description",
    },
    {
      title: "·∫¢nh",
      dataIndex: "image",
      key: "image",
      render: (img) =>
        img ? (
          // Hi·ªÉn th·ªã ·∫£nh n·∫øu c√≥, x·ª≠ l√Ω URL ·∫£nh
          <img
            src={img.startsWith("http") ? img : ImageBaseUrl + img}
            alt="·∫¢nh"
            style={{ width: 60, borderRadius: 4 }}
          />
        ) : (
          // Hi·ªÉn th·ªã text "Kh√¥ng c√≥" n·∫øu kh√¥ng c√≥ ·∫£nh
          <span style={{ color: "#ccc" }}>Kh√¥ng c√≥</span>
        ),
      width: 80,
      align: "center",
    },
    {
      title: "Tr·∫°ng th√°i",
      dataIndex: "status",
      key: "status",
      align: "center",
      render: (status) => (
        // Hi·ªÉn th·ªã tr·∫°ng th√°i b·∫±ng Tag v·ªõi m√†u s·∫Øc t∆∞∆°ng ·ª©ng
        <Tag color={statusColor[status] || "default"}>
          {statusLabel[status] || status?.toUpperCase()}
        </Tag>
      ),
    },
    {
      title: "Ch·ª©c nƒÉng",
      key: "action",
      align: "center",
      render: (_, record) => (
        <span>
          {/* N√∫t ch·ªânh s·ª≠a danh m·ª•c */}
          <Button
            type="link"
            icon={<EditOutlined />}
            onClick={() =>
              setModal({ open: true, edit: true, initial: record })
            }
          />
          {/* N√∫t x√≥a v·ªõi x√°c nh·∫≠n */}
          <Popconfirm
            title="B·∫°n ch·∫Øc ch·∫Øn mu·ªën xo√° danh m·ª•c n√†y?"
            okText="Xo√°"
            cancelText="Hu·ª∑"
            onConfirm={() => handleDelete(record)}
          >
            <Button
              type="link"
              icon={
                <span
                  className="anticon"
                  style={{ color: "red", fontSize: 18 }}
                >
                  üóëÔ∏è
                </span>
              }
              danger
            />
          </Popconfirm>
        </span>
      ),
      width: 120,
    },
  ];

  return (
    <div>
      {/* Thanh c√¥ng c·ª• v·ªõi n√∫t th√™m v√† √¥ t√¨m ki·∫øm */}
      <div style={{ display: "flex", gap: 12, marginBottom: 18 }}>
        {/* N√∫t th√™m danh m·ª•c m·ªõi */}
        <Button
          type="primary"
          icon={<PlusOutlined />}
          style={{ background: "#23643A" }}
          onClick={() => setModal({ open: true, edit: false, initial: {} })}
        >
          Th√™m danh m·ª•c
        </Button>
        {/* √î t√¨m ki·∫øm danh m·ª•c */}
        <Input
          allowClear
          prefix={<SearchOutlined />}
          placeholder="T√¨m theo t√™n/m√¥ t·∫£"
          style={{ width: 280 }}
          onChange={(e) => {
            isSearching.current = true; // ƒê√°nh d·∫•u ƒëang search ƒë·ªÉ reset page
            setKeyword(e.target.value);
          }}
          value={keyword}
        />
      </div>
      
      {/* B·∫£ng hi·ªÉn th·ªã danh s√°ch danh m·ª•c thi·∫øt b·ªã */}
      <Table
        rowKey="_id"
        columns={columns}
        dataSource={categories}
        loading={loading}
        pagination={{
          current: page,
          total: pagination.total,
          pageSize: pagination.pageSize,
          onChange: setPage,
          showSizeChanger: false,
        }}
        bordered
      />
      
      {/* Modal th√™m/s·ª≠a danh m·ª•c thi·∫øt b·ªã */}
      <EquipmentCategoryModal
        open={modal.open}
        isEdit={modal.edit}
        initialValues={modal.initial}
        confirmLoading={confirmLoading}
        onOk={handleOk}
        onCancel={() => setModal({ open: false, edit: false, initial: {} })}
      />
    </div>
  );
}
