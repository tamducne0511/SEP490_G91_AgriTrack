// Import component EditorTinyMCE ƒë·ªÉ t·∫°o rich text editor
import EditorTinyMCE from "@/components/EditorTinyMCE";
// Import c√°c route paths ƒë∆∞·ª£c ƒë·ªãnh nghƒ©a trong h·ªá th·ªëng
import { RoutePaths } from "@/routes";
// Import store qu·∫£n l√Ω authentication (th√¥ng tin user ƒëƒÉng nh·∫≠p)
import { useAuthStore } from "@/stores";
// Import store qu·∫£n l√Ω farm schedule (l·ªãch trang tr·∫°i)
import { useFarmScheduleStore } from "@/stores/farmScheduleStore";
// Import base URL cho h√¨nh ·∫£nh
import { ImageBaseUrl } from "@/variables/common";
// Import c√°c icon t·ª´ Ant Design
import {
  ArrowLeftOutlined, // Icon m≈©i t√™n tr√°i (quay l·∫°i)
  CalendarOutlined, // Icon l·ªãch
  EyeOutlined, // Icon m·∫Øt (xem chi ti·∫øt)
  FileImageOutlined, // Icon file ·∫£nh
} from "@ant-design/icons";
// Import c√°c component UI t·ª´ Ant Design
import {
  Avatar, // Component hi·ªÉn th·ªã avatar/·∫£nh ƒë·∫°i di·ªán
  Button, // Component n√∫t b·∫•m
  Card, // Component card container
  Col, // Component c·ªôt trong grid system
  DatePicker, // Component ch·ªçn ng√†y
  Form, // Component form
  Input, // Component input text
  List, // Component danh s√°ch
  Modal, // Component modal popup
  Row, // Component h√†ng trong grid system
  Space, // Component t·∫°o kho·∫£ng c√°ch gi·ªØa c√°c element
  Spin, // Component loading spinner
  Tag, // Component tag/label
  Tooltip, // Component tooltip khi hover
  Typography, // Component typography (Text, Title, etc.)
  Upload, // Component upload file
  message, // Component hi·ªÉn th·ªã th√¥ng b√°o
} from "antd";
// Import th∆∞ vi·ªán dayjs ƒë·ªÉ x·ª≠ l√Ω ng√†y th√°ng
import dayjs from "dayjs";
// Import React hooks
import { useEffect, useState } from "react";
// Import React Router hooks ƒë·ªÉ ƒëi·ªÅu h∆∞·ªõng v√† l·∫•y params
import { useNavigate, useParams } from "react-router-dom";

// Destructure Typography components ƒë·ªÉ s·ª≠ d·ª•ng ng·∫Øn g·ªçn
const { Text, Title } = Typography;

/**
 * FarmScheduleDetailPage - Trang chi ti·∫øt l·ªãch trang tr·∫°i
 * Hi·ªÉn th·ªã danh s√°ch l·ªãch c·ªßa m·ªôt trang tr·∫°i c·ª• th·ªÉ v√† cho ph√©p t·∫°o l·ªãch m·ªõi
 */
export default function FarmScheduleDetailPage() {
  // L·∫•y farmId t·ª´ URL params (id c·ªßa trang tr·∫°i)
  const { id: farmId } = useParams();
  // L·∫•y th√¥ng tin user hi·ªán t·∫°i t·ª´ auth store
  const { user } = useAuthStore();
  // Ki·ªÉm tra xem user c√≥ ph·∫£i l√† farm-admin kh√¥ng (quy·ªÅn h·∫°n kh√°c nhau)
  const isFarmAdmin = user?.role === "farm-admin";

  // Destructure c√°c state v√† actions t·ª´ farm schedule store
  const {
    schedules, // Danh s√°ch l·ªãch c·ªßa trang tr·∫°i
    loading, // Tr·∫°ng th√°i ƒëang t·∫£i d·ªØ li·ªáu
    error, // L·ªói n·∫øu c√≥
    fetchSchedules, // H√†m l·∫•y danh s√°ch l·ªãch
    createSchedule, // H√†m t·∫°o l·ªãch m·ªõi
    creating, // Tr·∫°ng th√°i ƒëang t·∫°o l·ªãch
  } = useFarmScheduleStore();
  // Hook ƒë·ªÉ ƒëi·ªÅu h∆∞·ªõng trang
  const navigate = useNavigate();

  // State qu·∫£n l√Ω modal th√™m l·ªãch m·ªõi
  const [addModal, setAddModal] = useState(false);
  // Form instance ƒë·ªÉ qu·∫£n l√Ω form data
  const [form] = Form.useForm();
  // State qu·∫£n l√Ω danh s√°ch file upload (·∫£nh)
  const [fileList, setFileList] = useState([]);
  // State l∆∞u n·ªôi dung HTML t·ª´ TinyMCE editor (m√¥ t·∫£ l·ªãch)
  const [desc, setDesc] = useState(""); // TinyMCE HTML string
  // State l∆∞u n·ªôi dung HTML t·ª´ TinyMCE editor (m√¥ t·∫£ c√¢y)
  const [treeDesc, setTreeDesc] = useState(""); // TinyMCE HTML string
  // State theo d√µi vi·ªác load TinyMCE editor (ƒë·ªÉ tr√°nh l·ªói khi ch∆∞a load xong)
  const [isEditorLoaded, setIsEditorLoaded] = useState(false); // Track TinyMCE loading

  // Effect ch·∫°y khi component mount ho·∫∑c farmId thay ƒë·ªïi
  useEffect(() => {
    // N·∫øu c√≥ farmId th√¨ g·ªçi API l·∫•y danh s√°ch l·ªãch c·ªßa trang tr·∫°i ƒë√≥
    if (farmId) fetchSchedules(farmId);
  }, [farmId]);

  /**
   * H√†m x·ª≠ l√Ω t·∫°o l·ªãch m·ªõi
   * Validate form -> t·∫°o FormData -> g·ªçi API -> reset form -> refresh danh s√°ch
   */
  const handleAdd = async () => {
    try {
      // Validate t·∫•t c·∫£ fields trong form, n·∫øu l·ªói s·∫Ω throw exception
      const values = await form.validateFields();
      // T·∫°o FormData ƒë·ªÉ g·ª≠i l√™n server (h·ªó tr·ª£ file upload)
      const formData = new FormData();
      formData.append("farmId", farmId); // ID trang tr·∫°i
      formData.append("title", values.title); // Ti√™u ƒë·ªÅ l·ªãch
      formData.append("description", desc); // M√¥ t·∫£ l·ªãch (HTML t·ª´ TinyMCE)
      formData.append("treeDescription", treeDesc); // M√¥ t·∫£ c√¢y (HTML t·ª´ TinyMCE)
      formData.append("startAt", values.dates[0].format("YYYY-MM-DD")); // Ng√†y b·∫Øt ƒë·∫ßu
      formData.append("endAt", values.dates[1].format("YYYY-MM-DD")); // Ng√†y k·∫øt th√∫c
      formData.append("treeName", values.treeName); // T√™n c√¢y
      // N·∫øu c√≥ ·∫£nh ƒë∆∞·ª£c ch·ªçn th√¨ th√™m v√†o FormData
      if (fileList[0]?.originFileObj) {
        formData.append("image", fileList[0].originFileObj);
      }
      // G·ªçi API t·∫°o l·ªãch m·ªõi
      await createSchedule(formData);
      // Hi·ªÉn th·ªã th√¥ng b√°o th√†nh c√¥ng
      message.success("T·∫°o l·ªãch th√†nh c√¥ng!");
      // ƒê√≥ng modal
      setAddModal(false);
      // Reset form v·ªÅ tr·∫°ng th√°i ban ƒë·∫ßu
      form.resetFields();
      // Reset c√°c state kh√°c
      setDesc("");
      setTreeDesc("");
      setFileList([]);
      // Refresh l·∫°i danh s√°ch l·ªãch ƒë·ªÉ hi·ªÉn th·ªã l·ªãch v·ª´a t·∫°o
      fetchSchedules(farmId);
    } catch (err) {
      // Hi·ªÉn th·ªã th√¥ng b√°o l·ªói n·∫øu c√≥ l·ªói x·∫£y ra
      message.error(err?.message || "Kh√¥ng th·ªÉ t·∫°o l·ªãch");
    }
  };

  /**
   * H√†m callback khi TinyMCE editor ƒë√£ load xong
   * C·∫ßn ƒë·ªÉ tr√°nh l·ªói khi editor ch∆∞a s·∫µn s√†ng
   */
  const handleEditorLoad = () => {
    setIsEditorLoaded(true); // TinyMCE ƒë√£ load xong
  };

  return (
    <div>
      {/* N√∫t quay l·∫°i trang tr∆∞·ªõc */}
      <Button
        icon={<ArrowLeftOutlined />} // Icon m≈©i t√™n tr√°i
        onClick={() => navigate(-1)} // Quay l·∫°i trang tr∆∞·ªõc trong history
        style={{ marginBottom: 16, marginRight: 8 }} // Style cho n√∫t
      >
        Quay l·∫°i
      </Button>

      {/* Card ch√≠nh ch·ª©a danh s√°ch l·ªãch */}
      <Card
        title={
          <Title level={4} style={{ margin: 0 }}>
            üìÖ Danh s√°ch l·ªãch c·ªßa trang tr·∫°i {/* Ti√™u ƒë·ªÅ card */}
          </Title>
        }
        extra={
          // Ch·ªâ hi·ªÉn th·ªã n√∫t "Th√™m l·ªãch m·ªõi" n·∫øu user KH√îNG ph·∫£i farm-admin
          !isFarmAdmin && (
            <Button
              onClick={() => setAddModal(true)} // M·ªü modal th√™m l·ªãch
              type="primary" // Ki·ªÉu n√∫t primary (m√†u xanh)
              icon={<CalendarOutlined />} // Icon l·ªãch
              style={{ borderRadius: 8, fontWeight: 600 }} // Style bo g√≥c v√† font weight
            >
              Th√™m l·ªãch m·ªõi
            </Button>
          )
        }
        style={{
          margin: "auto", // CƒÉn gi·ªØa card
          borderRadius: 20, // Bo g√≥c 20px
          boxShadow: "0 4px 24px #5cdb9733", // ƒê·ªï b√≥ng m√†u xanh nh·∫°t
          marginBottom: 32, // Kho·∫£ng c√°ch d∆∞·ªõi 32px
        }}
      >
        {/* Hi·ªÉn th·ªã loading, error ho·∫∑c danh s√°ch l·ªãch */}
        {loading ? (
          // Hi·ªÉn th·ªã spinner khi ƒëang t·∫£i d·ªØ li·ªáu
          <Spin style={{ margin: 40 }} />
        ) : error ? (
          // Hi·ªÉn th·ªã th√¥ng b√°o l·ªói n·∫øu c√≥ l·ªói
          <div style={{ color: "red", padding: 28 }}>{error}</div>
        ) : (
          // Hi·ªÉn th·ªã danh s√°ch l·ªãch
          <List
            dataSource={schedules} // D·ªØ li·ªáu danh s√°ch l·ªãch
            locale={{
              // Text hi·ªÉn th·ªã khi danh s√°ch r·ªóng
              emptyText: (
                <Text type="secondary">
                  Ch∆∞a c√≥ l·ªãch n√†o cho trang tr·∫°i n√†y.
                </Text>
              ),
            }}
            renderItem={(item) => (
              // Render t·ª´ng item l·ªãch trong danh s√°ch
              <List.Item
                style={{
                  borderBottom: "1px solid #f3f3f3", // Vi·ªÅn d∆∞·ªõi
                  padding: "22px 36px 12px 28px", // Padding cho item
                  // N·ªÅn xanh nh·∫°t n·∫øu l·ªãch ƒëang ho·∫°t ƒë·ªông, tr·∫Øng n·∫øu k·∫øt th√∫c
                  background: item.status ? "#f6ffed" : "#fff",
                  // Vi·ªÅn tr√°i xanh n·∫øu ƒëang ho·∫°t ƒë·ªông, x√°m n·∫øu k·∫øt th√∫c
                  borderLeft: item.status
                    ? "5px solid #52c41a"
                    : "5px solid #f0f0f0",
                }}
                actions={[
                  // N√∫t xem chi ti·∫øt l·ªãch
                  <Tooltip title="Chi ti·∫øt l·ªãch" key="view">
                    <Button
                      onClick={() =>
                        // ƒêi·ªÅu h∆∞·ªõng ƒë·∫øn trang chi ti·∫øt c√¢y c·ªßa l·ªãch
                        navigate(RoutePaths.FARM_SCHEDULE_TREE_DETAIL(item._id))
                      }
                      icon={<EyeOutlined />} // Icon m·∫Øt
                      shape="circle" // H√¨nh tr√≤n
                    />
                  </Tooltip>,
                ]}
              >
                {/* Th√¥ng tin chi ti·∫øt c·ªßa l·ªãch */}
                <List.Item.Meta
                  avatar={
                    // Hi·ªÉn th·ªã ·∫£nh l·ªãch n·∫øu c√≥, n·∫øu kh√¥ng th√¨ hi·ªÉn th·ªã icon m·∫∑c ƒë·ªãnh
                    item.image ? (
                      <Avatar
                        shape="square" // H√¨nh vu√¥ng
                        size={64} // K√≠ch th∆∞·ªõc 64px
                        src={
                          // Ki·ªÉm tra n·∫øu ·∫£nh l√† URL ƒë·∫ßy ƒë·ªß hay ch·ªâ l√† path
                          item.image.startsWith("http")
                            ? item.image // URL ƒë·∫ßy ƒë·ªß
                            : ImageBaseUrl + item.image // Th√™m base URL
                        }
                        style={{ borderRadius: 14, background: "#fafafa" }} // Bo g√≥c v√† n·ªÅn
                        icon={<FileImageOutlined />} // Icon m·∫∑c ƒë·ªãnh khi load l·ªói
                      />
                    ) : (
                      // Avatar m·∫∑c ƒë·ªãnh khi kh√¥ng c√≥ ·∫£nh
                      <Avatar
                        shape="square" // H√¨nh vu√¥ng
                        size={64} // K√≠ch th∆∞·ªõc 64px
                        style={{ background: "#eee", borderRadius: 14 }} // N·ªÅn x√°m v√† bo g√≥c
                      >
                        <FileImageOutlined /> {/* Icon file ·∫£nh */}
                      </Avatar>
                    )
                  }
                  title={
                    // Ti√™u ƒë·ªÅ l·ªãch v√† tag tr·∫°ng th√°i
                    <Space direction="horizontal" align="center" size={8}>
                      <span style={{ fontWeight: 600, fontSize: 17 }}>
                        {item.title} {/* T√™n l·ªãch */}
                      </span>
                      {/* Tag hi·ªÉn th·ªã tr·∫°ng th√°i l·ªãch */}
                      {item.status ? (
                        <Tag color="green" style={{ fontWeight: 500 }}>
                          Ho·∫°t ƒë·ªông {/* L·ªãch ƒëang ho·∫°t ƒë·ªông */}
                        </Tag>
                      ) : (
                        <Tag color="gray" style={{ fontWeight: 500 }}>
                          K·∫øt th√∫c {/* L·ªãch ƒë√£ k·∫øt th√∫c */}
                        </Tag>
                      )}
                    </Space>
                  }
                  description={
                    // M√¥ t·∫£ hi·ªÉn th·ªã kho·∫£ng th·ªùi gian c·ªßa l·ªãch
                    <>
                      <div style={{ color: "#888", fontSize: 13 }}>
                        <CalendarOutlined />{" "} {/* Icon l·ªãch */}
                        <b>{dayjs(item.startAt).format("YYYY-MM-DD")}</b> ~{" "} {/* Ng√†y b·∫Øt ƒë·∫ßu */}
                        <b>{dayjs(item.endAt).format("YYYY-MM-DD")}</b> {/* Ng√†y k·∫øt th√∫c */}
                      </div>
                    </>
                  }
                />
              </List.Item>
            )}
          />
        )}
      </Card>

      {/* Modal t·∫°o l·ªãch m·ªõi */}
      <Modal
        title={
          <span style={{ fontWeight: 600, fontSize: 22 }}>T·∫°o l·ªãch m·ªõi</span> // Ti√™u ƒë·ªÅ modal
        }
        open={addModal} // ƒêi·ªÅu khi·ªÉn hi·ªÉn th·ªã modal
        onCancel={() => setAddModal(false)} // ƒê√≥ng modal khi b·∫•m Cancel
        onOk={handleAdd} // X·ª≠ l√Ω khi b·∫•m OK (t·∫°o l·ªãch)
        okText="T·∫°o l·ªãch" // Text n√∫t OK
        confirmLoading={creating} // Hi·ªÉn th·ªã loading khi ƒëang t·∫°o
        destroyOnClose // Destroy component khi ƒë√≥ng modal
        maskClosable={false} // Kh√¥ng cho ƒë√≥ng khi click b√™n ngo√†i
        closable={!creating} // Kh√¥ng cho ƒë√≥ng khi ƒëang t·∫°o
        okButtonProps={{ disabled: isFarmAdmin }} // Disable n√∫t OK n·∫øu l√† farm-admin
        cancelButtonProps={{ disabled: isFarmAdmin }} // Disable n√∫t Cancel n·∫øu l√† farm-admin
        width="92vw" // Chi·ªÅu r·ªông 92% viewport
        style={{ top: 16, maxWidth: "1040px", padding: 0 }} // Style modal
        bodyStyle={{ padding: 28 }} // Style body modal
      >
        {/* Form t·∫°o l·ªãch m·ªõi */}
        <Form form={form} layout="vertical">
          {/* Tr∆∞·ªùng ti√™u ƒë·ªÅ l·ªãch */}
          <Form.Item
            name="title"
            label="Ti√™u ƒë·ªÅ"
            rules={[{ required: true, message: "Nh·∫≠p ti√™u ƒë·ªÅ" }]} // Validation b·∫Øt bu·ªôc
          >
            <Input placeholder="Nh·∫≠p ti√™u ƒë·ªÅ l·ªãch" disabled={isFarmAdmin} />
          </Form.Item>

          {/* Row ch·ª©a 2 editor TinyMCE */}
          <Row gutter={24}>
            {/* Editor M√¥ t·∫£ l·ªãch - C·ªôt tr√°i */}
            <Col xs={24} md={12}>
              <Form.Item label="M√¥ t·∫£ l·ªãch">
                <EditorTinyMCE
                  value={desc} // Gi√° tr·ªã hi·ªán t·∫°i
                  onEditorLoad={handleEditorLoad} // Callback khi editor load xong
                  isEditorLoaded={isEditorLoaded} // Tr·∫°ng th√°i load editor
                  onChange={setDesc} // Callback khi thay ƒë·ªïi n·ªôi dung
                  readOnly={isFarmAdmin} // Ch·ªâ ƒë·ªçc n·∫øu l√† farm-admin
                  placeholder="Nh·∫≠p m√¥ t·∫£ l·ªãch..."
                />
              </Form.Item>
            </Col>
            {/* Editor M√¥ t·∫£ c√¢y - C·ªôt ph·∫£i */}
            <Col xs={24} md={12}>
              <Form.Item
                name="treeDescription"
                label="M√¥ t·∫£ c√¢y"
                rules={[{ required: true, message: "Nh·∫≠p m√¥ t·∫£ c√¢y" }]} // Validation b·∫Øt bu·ªôc
              >
                <EditorTinyMCE
                  value={treeDesc} // Gi√° tr·ªã hi·ªán t·∫°i
                  onChange={setTreeDesc} // Callback khi thay ƒë·ªïi n·ªôi dung
                  onEditorLoad={handleEditorLoad} // Callback khi editor load xong
                  isEditorLoaded={isEditorLoaded} // Tr·∫°ng th√°i load editor
                  readOnly={isFarmAdmin} // Ch·ªâ ƒë·ªçc n·∫øu l√† farm-admin
                  placeholder="Nh·∫≠p m√¥ t·∫£ c√¢y..."
                />
              </Form.Item>
            </Col>
          </Row>

          {/* Tr∆∞·ªùng t√™n c√¢y */}
          <Form.Item
            name="treeName"
            label="T√™n c√¢y"
            rules={[{ required: true, message: "Nh·∫≠p t√™n c√¢y" }]} // Validation b·∫Øt bu·ªôc
          >
            <Input disabled={isFarmAdmin} />
          </Form.Item>
          {/* Tr∆∞·ªùng ch·ªçn kho·∫£ng th·ªùi gian */}
          <Form.Item
            name="dates"
            label="Kho·∫£ng th·ªùi gian"
            rules={[{ required: true, message: "Ch·ªçn th·ªùi gian" }]} // Validation b·∫Øt bu·ªôc
          >
            <DatePicker.RangePicker
              format="YYYY-MM-DD" // Format ng√†y th√°ng
              style={{ width: "100%" }} // Chi·ªÅu r·ªông 100%
              disabled={isFarmAdmin} // Disable n·∫øu l√† farm-admin
            />
          </Form.Item>
          {/* Tr∆∞·ªùng upload ·∫£nh */}
          <Form.Item label="·∫¢nh (b·∫Øt bu·ªôc)">
            <Upload
              beforeUpload={() => false} // Kh√¥ng upload t·ª± ƒë·ªông
              maxCount={1} // Ch·ªâ cho ph√©p 1 ·∫£nh
              fileList={fileList} // Danh s√°ch file hi·ªán t·∫°i
              onChange={({ fileList }) => setFileList(fileList)} // Callback khi thay ƒë·ªïi file
              accept="image/*" // Ch·ªâ ch·∫•p nh·∫≠n file ·∫£nh
              listType="picture" // Ki·ªÉu hi·ªÉn th·ªã danh s√°ch
              disabled={isFarmAdmin} // Disable n·∫øu l√† farm-admin
            >
              <Button disabled={isFarmAdmin}>Ch·ªçn ·∫£nh</Button> {/* N√∫t ch·ªçn ·∫£nh */}
            </Upload>
          </Form.Item>
        </Form>
      </Modal>
    </div>
  );
}
